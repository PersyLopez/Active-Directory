{
  "version": 3,
  "sources": ["../src/util-types.ts"],
  "sourcesContent": ["/**\n * Utility type that extracts the value type from a Set type.\n *\n * This helper type uses conditional type inference to extract the element type\n * from a Set. It's useful when working with sets in type definitions where you\n * need to reference the type of elements contained within the set.\n *\n * The type uses TypeScript's `infer` keyword to capture the generic parameter\n * of the Set type, making it reusable across different Set types.\n *\n * @example\n * ```ts\n * import { SetValue } from '@tldraw/tlschema'\n *\n * // Extract value type from a Set type\n * type StringSet = Set<string>\n * type StringValue = SetValue<StringSet> // string\n *\n * type NumberSet = Set<number>\n * type NumberValue = SetValue<NumberSet> // number\n * ```\n *\n * @example\n * ```ts\n * // Usage with const sets\n * const COLORS = new Set(['red', 'green', 'blue'] as const)\n * type ColorSet = typeof COLORS\n * type Color = SetValue<ColorSet> // 'red' | 'green' | 'blue'\n *\n * // Function that accepts set values\n * function processColor(color: SetValue<typeof COLORS>) {\n *   // color is typed as 'red' | 'green' | 'blue'\n *   console.log(`Processing color: ${color}`)\n * }\n * ```\n *\n * @example\n * ```ts\n * // Complex usage with union types\n * const UI_COLORS = new Set(['selection-stroke', 'accent', 'muted'])\n * type UIColorSet = typeof UI_COLORS\n * type UIColor = SetValue<UIColorSet> // 'selection-stroke' | 'accent' | 'muted'\n *\n * // Validate color is in set\n * function isValidUIColor(color: string): color is UIColor {\n *   return UI_COLORS.has(color)\n * }\n * ```\n *\n * @public\n */\nexport type SetValue<T extends Set<any>> = T extends Set<infer U> ? U : never\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
