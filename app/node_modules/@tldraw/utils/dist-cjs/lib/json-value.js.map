{
  "version": 3,
  "sources": ["../../src/lib/json-value.ts"],
  "sourcesContent": ["/**\n * A type that represents any valid JSON value. This includes primitives (boolean, null, string, number),\n * arrays of JSON values, and objects with string keys and JSON values.\n *\n * @example\n * ```ts\n * const jsonData: JsonValue = {\n *   name: \"Alice\",\n *   age: 30,\n *   active: true,\n *   tags: [\"user\", \"premium\"],\n *   metadata: null\n * }\n * ```\n *\n * @public\n */\nexport type JsonValue = JsonPrimitive | JsonArray | JsonObject\n\n/**\n * A type representing JSON primitive values: boolean, null, string, or number.\n * These are the atomic values that can appear in JSON data.\n *\n * @example\n * ```ts\n * const primitives: JsonPrimitive[] = [\n *   true,\n *   null,\n *   \"hello\",\n *   42\n * ]\n * ```\n *\n * @public\n */\nexport type JsonPrimitive = boolean | null | string | number\n\n/**\n * A type representing a JSON array containing any valid JSON values.\n * Arrays can contain mixed types of JSON values including nested arrays and objects.\n *\n * @example\n * ```ts\n * const jsonArray: JsonArray = [\n *   \"text\",\n *   123,\n *   true,\n *   { nested: \"object\" },\n *   [1, 2, 3]\n * ]\n * ```\n *\n * @public\n */\nexport type JsonArray = JsonValue[]\n\n/**\n * A type representing a JSON object with string keys and JSON values.\n * Object values can be undefined to handle optional properties safely.\n *\n * @example\n * ```ts\n * const jsonObject: JsonObject = {\n *   required: \"value\",\n *   optional: undefined,\n *   nested: {\n *     deep: \"property\"\n *   },\n *   array: [1, 2, 3]\n * }\n * ```\n *\n * @public\n */\nexport interface JsonObject {\n\t[key: string]: JsonValue | undefined\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
