"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getLocalFiles_exports = {};
__export(getLocalFiles_exports, {
  getLocalFiles: () => getLocalFiles
});
module.exports = __toCommonJS(getLocalFiles_exports);
function getLocalFiles(options) {
  return new Promise((resolve) => {
    const { allowMultiple = true, mimeTypes = [] } = options || {};
    const input = document.createElement("input");
    input.type = "file";
    input.accept = mimeTypes?.join(",");
    input.multiple = allowMultiple;
    async function onchange(e) {
      const fileList = e.target.files;
      if (!fileList || fileList.length === 0) return;
      const files = Array.from(fileList);
      input.value = "";
      resolve(files);
      input.removeEventListener("change", onchange);
      input.remove();
    }
    input.addEventListener("change", onchange);
    input?.click();
  });
}
//# sourceMappingURL=getLocalFiles.js.map
