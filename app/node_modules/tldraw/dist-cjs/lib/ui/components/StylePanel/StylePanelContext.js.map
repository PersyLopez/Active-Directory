{
  "version": 3,
  "sources": ["../../../../../src/lib/ui/components/StylePanel/StylePanelContext.tsx"],
  "sourcesContent": ["import { ReadonlySharedStyleMap, StyleProp, useEditor, useValue } from '@tldraw/editor'\nimport { createContext, useCallback, useContext } from 'react'\nimport { useUiEvents } from '../../context/events'\n\n/** @public */\nexport interface StylePanelContext {\n\tstyles: ReadonlySharedStyleMap\n\tenhancedA11yMode: boolean\n\tonHistoryMark(id: string): void\n\tonValueChange<T>(style: StyleProp<T>, value: T): void\n}\nconst StylePanelContext = createContext<null | StylePanelContext>(null)\n\n/** @public */\nexport interface StylePanelContextProviderProps {\n\tchildren: React.ReactNode\n\tstyles: ReadonlySharedStyleMap\n}\n\n/** @public @react */\nexport function StylePanelContextProvider({ children, styles }: StylePanelContextProviderProps) {\n\tconst editor = useEditor()\n\tconst trackEvent = useUiEvents()\n\n\tconst onHistoryMark = useCallback((id: string) => editor.markHistoryStoppingPoint(id), [editor])\n\tconst enhancedA11yMode = useValue('enhancedA11yMode', () => editor.user.getEnhancedA11yMode(), [\n\t\teditor,\n\t])\n\tconst onValueChange = useCallback(\n\t\tfunction <T>(style: StyleProp<T>, value: T) {\n\t\t\teditor.run(() => {\n\t\t\t\tif (editor.isIn('select')) {\n\t\t\t\t\teditor.setStyleForSelectedShapes(style, value)\n\t\t\t\t}\n\t\t\t\teditor.setStyleForNextShapes(style, value)\n\t\t\t\teditor.updateInstanceState({ isChangingStyle: true })\n\t\t\t})\n\n\t\t\ttrackEvent('set-style', { source: 'style-panel', id: style.id, value: value as string })\n\t\t},\n\t\t[editor, trackEvent]\n\t)\n\n\treturn (\n\t\t<StylePanelContext.Provider\n\t\t\tvalue={{\n\t\t\t\tstyles: styles,\n\t\t\t\tenhancedA11yMode,\n\t\t\t\tonHistoryMark,\n\t\t\t\tonValueChange,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</StylePanelContext.Provider>\n\t)\n}\n\n/** @public */\nexport function useStylePanelContext() {\n\tconst context = useContext(StylePanelContext)\n\tif (!context) {\n\t\tthrow new Error('useStylePanelContext must be used within a StylePanelContextProvider')\n\t}\n\treturn context\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CE;AA5CF,oBAAuE;AACvE,mBAAuD;AACvD,oBAA4B;AAS5B,MAAM,wBAAoB,4BAAwC,IAAI;AAS/D,SAAS,0BAA0B,EAAE,UAAU,OAAO,GAAmC;AAC/F,QAAM,aAAS,yBAAU;AACzB,QAAM,iBAAa,2BAAY;AAE/B,QAAM,oBAAgB,0BAAY,CAAC,OAAe,OAAO,yBAAyB,EAAE,GAAG,CAAC,MAAM,CAAC;AAC/F,QAAM,uBAAmB,wBAAS,oBAAoB,MAAM,OAAO,KAAK,oBAAoB,GAAG;AAAA,IAC9F;AAAA,EACD,CAAC;AACD,QAAM,oBAAgB;AAAA,IACrB,SAAa,OAAqB,OAAU;AAC3C,aAAO,IAAI,MAAM;AAChB,YAAI,OAAO,KAAK,QAAQ,GAAG;AAC1B,iBAAO,0BAA0B,OAAO,KAAK;AAAA,QAC9C;AACA,eAAO,sBAAsB,OAAO,KAAK;AACzC,eAAO,oBAAoB,EAAE,iBAAiB,KAAK,CAAC;AAAA,MACrD,CAAC;AAED,iBAAW,aAAa,EAAE,QAAQ,eAAe,IAAI,MAAM,IAAI,MAAuB,CAAC;AAAA,IACxF;AAAA,IACA,CAAC,QAAQ,UAAU;AAAA,EACpB;AAEA,SACC;AAAA,IAAC,kBAAkB;AAAA,IAAlB;AAAA,MACA,OAAO;AAAA,QACN;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD;AAAA,MAEC;AAAA;AAAA,EACF;AAEF;AAGO,SAAS,uBAAuB;AACtC,QAAM,cAAU,yBAAW,iBAAiB;AAC5C,MAAI,CAAC,SAAS;AACb,UAAM,IAAI,MAAM,sEAAsE;AAAA,EACvF;AACA,SAAO;AACR;",
  "names": []
}
