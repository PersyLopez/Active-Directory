import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import { assert, atom, uniqueId, useMaybeEditor, useValue } from "@tldraw/editor";
import { Tooltip as _Tooltip } from "radix-ui";
import React, {
  createContext,
  forwardRef,
  useContext,
  useEffect,
  useLayoutEffect,
  useRef,
  useState
} from "react";
import { useTldrawUiOrientation } from "./layout.mjs";
const DEFAULT_TOOLTIP_DELAY_MS = 700;
class TooltipManager {
  static instance = null;
  currentTooltip = atom("current tooltip", null);
  destroyTimeoutId = null;
  static getInstance() {
    if (!TooltipManager.instance) {
      TooltipManager.instance = new TooltipManager();
    }
    return TooltipManager.instance;
  }
  showTooltip(tooltipId, content, targetElement, side, sideOffset, showOnMobile, delayDuration) {
    if (this.destroyTimeoutId) {
      clearTimeout(this.destroyTimeoutId);
      this.destroyTimeoutId = null;
    }
    this.currentTooltip.set({
      id: tooltipId,
      content,
      side,
      sideOffset,
      showOnMobile,
      targetElement,
      delayDuration
    });
  }
  updateCurrentTooltip(tooltipId, update) {
    this.currentTooltip.update((tooltip) => {
      if (tooltip?.id === tooltipId) {
        return update(tooltip);
      }
      return tooltip;
    });
  }
  hideTooltip(editor, tooltipId, instant = false) {
    const hide = () => {
      if (this.currentTooltip.get()?.id === tooltipId) {
        this.currentTooltip.set(null);
        this.destroyTimeoutId = null;
      }
    };
    if (editor && !instant) {
      this.destroyTimeoutId = editor.timers.setTimeout(hide, 300);
    } else {
      hide();
    }
  }
  hideAllTooltips() {
    this.currentTooltip.set(null);
    this.destroyTimeoutId = null;
  }
  getCurrentTooltipData() {
    const currentTooltip = this.currentTooltip.get();
    if (!currentTooltip) return null;
    if (!this.supportsHover() && !currentTooltip.showOnMobile) return null;
    return currentTooltip;
  }
  supportsHoverAtom = null;
  supportsHover() {
    if (!this.supportsHoverAtom) {
      const mediaQuery = window.matchMedia("(hover: hover)");
      const supportsHover = atom("has hover", mediaQuery.matches);
      this.supportsHoverAtom = supportsHover;
      mediaQuery.addEventListener("change", (e) => {
        supportsHover.set(e.matches);
      });
    }
    return this.supportsHoverAtom.get();
  }
}
const tooltipManager = TooltipManager.getInstance();
const TooltipSingletonContext = createContext(false);
function TldrawUiTooltipProvider({ children }) {
  return /* @__PURE__ */ jsx(_Tooltip.Provider, { skipDelayDuration: 700, children: /* @__PURE__ */ jsxs(TooltipSingletonContext.Provider, { value: true, children: [
    children,
    /* @__PURE__ */ jsx(TooltipSingleton, {})
  ] }) });
}
function TooltipSingleton() {
  const [isOpen, setIsOpen] = useState(false);
  const triggerRef = useRef(null);
  const isFirstShowRef = useRef(true);
  const editor = useMaybeEditor();
  const currentTooltip = useValue(
    "current tooltip",
    () => tooltipManager.getCurrentTooltipData(),
    []
  );
  const cameraState = useValue("camera state", () => editor?.getCameraState(), [editor]);
  useEffect(() => {
    if (cameraState === "moving" && isOpen && currentTooltip) {
      tooltipManager.hideTooltip(editor, currentTooltip.id, true);
    }
  }, [cameraState, isOpen, currentTooltip, editor]);
  useEffect(() => {
    function handleKeyDown(event) {
      if (event.key === "Escape" && currentTooltip && isOpen) {
        tooltipManager.hideTooltip(editor, currentTooltip.id);
        event.stopPropagation();
      }
    }
    document.addEventListener("keydown", handleKeyDown, { capture: true });
    return () => {
      document.removeEventListener("keydown", handleKeyDown, { capture: true });
    };
  }, [editor, currentTooltip, isOpen]);
  useEffect(() => {
    let timer = null;
    if (currentTooltip && triggerRef.current) {
      const activeRect = currentTooltip.targetElement.getBoundingClientRect();
      const trigger = triggerRef.current;
      trigger.style.position = "fixed";
      trigger.style.left = `${activeRect.left}px`;
      trigger.style.top = `${activeRect.top}px`;
      trigger.style.width = `${activeRect.width}px`;
      trigger.style.height = `${activeRect.height}px`;
      trigger.style.pointerEvents = "none";
      trigger.style.zIndex = "9999";
      if (isFirstShowRef.current) {
        timer = setTimeout(() => {
          setIsOpen(true);
          isFirstShowRef.current = false;
        }, currentTooltip.delayDuration);
      } else {
        setIsOpen(true);
      }
    } else {
      setIsOpen(false);
      isFirstShowRef.current = true;
    }
    return () => {
      if (timer !== null) {
        clearTimeout(timer);
      }
    };
  }, [currentTooltip]);
  if (!currentTooltip) {
    return null;
  }
  return /* @__PURE__ */ jsxs(_Tooltip.Root, { open: isOpen, delayDuration: 0, children: [
    /* @__PURE__ */ jsx(_Tooltip.Trigger, { asChild: true, children: /* @__PURE__ */ jsx("div", { ref: triggerRef }) }),
    /* @__PURE__ */ jsxs(
      _Tooltip.Content,
      {
        className: "tlui-tooltip",
        side: currentTooltip.side,
        sideOffset: currentTooltip.sideOffset,
        avoidCollisions: true,
        collisionPadding: 8,
        dir: "ltr",
        children: [
          currentTooltip.content,
          /* @__PURE__ */ jsx(_Tooltip.Arrow, { className: "tlui-tooltip__arrow" })
        ]
      }
    )
  ] });
}
const TldrawUiTooltip = forwardRef(
  ({
    children,
    content,
    side,
    sideOffset = 5,
    disabled = false,
    showOnMobile = false,
    delayDuration
  }, ref) => {
    const editor = useMaybeEditor();
    const tooltipId = useRef(uniqueId());
    const hasProvider = useContext(TooltipSingletonContext);
    const enhancedA11yMode = useValue(
      "enhancedA11yMode",
      () => editor?.user.getEnhancedA11yMode(),
      [editor]
    );
    const orientationCtx = useTldrawUiOrientation();
    const sideToUse = side ?? orientationCtx.tooltipSide;
    useEffect(() => {
      const currentTooltipId = tooltipId.current;
      return () => {
        if (hasProvider) {
          tooltipManager.hideTooltip(editor, currentTooltipId, true);
        }
      };
    }, [editor, hasProvider]);
    useLayoutEffect(() => {
      if (hasProvider && tooltipManager.getCurrentTooltipData()?.id === tooltipId.current) {
        tooltipManager.updateCurrentTooltip(tooltipId.current, (tooltip) => ({
          ...tooltip,
          content,
          side: sideToUse,
          sideOffset,
          showOnMobile
        }));
      }
    }, [content, sideToUse, sideOffset, showOnMobile, hasProvider]);
    if (disabled || !content) {
      return /* @__PURE__ */ jsx(Fragment, { children });
    }
    let delayDurationToUse;
    if (enhancedA11yMode) {
      delayDurationToUse = 0;
    } else {
      delayDurationToUse = delayDuration ?? (editor?.options.tooltipDelayMs || DEFAULT_TOOLTIP_DELAY_MS);
    }
    if (!hasProvider || enhancedA11yMode) {
      return /* @__PURE__ */ jsxs(
        _Tooltip.Root,
        {
          delayDuration: delayDurationToUse,
          disableHoverableContent: !enhancedA11yMode,
          children: [
            /* @__PURE__ */ jsx(_Tooltip.Trigger, { asChild: true, ref, children }),
            /* @__PURE__ */ jsxs(
              _Tooltip.Content,
              {
                className: "tlui-tooltip",
                side: sideToUse,
                sideOffset,
                avoidCollisions: true,
                collisionPadding: 8,
                dir: "ltr",
                children: [
                  content,
                  /* @__PURE__ */ jsx(_Tooltip.Arrow, { className: "tlui-tooltip__arrow" })
                ]
              }
            )
          ]
        }
      );
    }
    const child = React.Children.only(children);
    assert(React.isValidElement(child), "TldrawUiTooltip children must be a single element");
    const handleMouseEnter = (event) => {
      child.props.onMouseEnter?.(event);
      tooltipManager.showTooltip(
        tooltipId.current,
        content,
        event.currentTarget,
        sideToUse,
        sideOffset,
        showOnMobile,
        delayDurationToUse
      );
    };
    const handleMouseLeave = (event) => {
      child.props.onMouseLeave?.(event);
      tooltipManager.hideTooltip(editor, tooltipId.current);
    };
    const handleFocus = (event) => {
      child.props.onFocus?.(event);
      tooltipManager.showTooltip(
        tooltipId.current,
        content,
        event.currentTarget,
        sideToUse,
        sideOffset,
        showOnMobile,
        delayDurationToUse
      );
    };
    const handleBlur = (event) => {
      child.props.onBlur?.(event);
      tooltipManager.hideTooltip(editor, tooltipId.current);
    };
    const childrenWithHandlers = React.cloneElement(children, {
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      onFocus: handleFocus,
      onBlur: handleBlur
    });
    return childrenWithHandlers;
  }
);
export {
  TldrawUiTooltip,
  TldrawUiTooltipProvider,
  tooltipManager
};
//# sourceMappingURL=TldrawUiTooltip.mjs.map
